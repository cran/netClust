// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// netEM_unilayer
List netEM_unilayer(arma::cube x, int K, double eps, int num_rand_start, int num_run_smallEM, int max_itr_smallEM, int burn, int MCMC_itr, double sigma_mult, int alpha);
RcppExport SEXP _netClust_netEM_unilayer(SEXP xSEXP, SEXP KSEXP, SEXP epsSEXP, SEXP num_rand_startSEXP, SEXP num_run_smallEMSEXP, SEXP max_itr_smallEMSEXP, SEXP burnSEXP, SEXP MCMC_itrSEXP, SEXP sigma_multSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< int >::type num_rand_start(num_rand_startSEXP);
    Rcpp::traits::input_parameter< int >::type num_run_smallEM(num_run_smallEMSEXP);
    Rcpp::traits::input_parameter< int >::type max_itr_smallEM(max_itr_smallEMSEXP);
    Rcpp::traits::input_parameter< int >::type burn(burnSEXP);
    Rcpp::traits::input_parameter< int >::type MCMC_itr(MCMC_itrSEXP);
    Rcpp::traits::input_parameter< double >::type sigma_mult(sigma_multSEXP);
    Rcpp::traits::input_parameter< int >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(netEM_unilayer(x, K, eps, num_rand_start, num_run_smallEM, max_itr_smallEM, burn, MCMC_itr, sigma_mult, alpha));
    return rcpp_result_gen;
END_RCPP
}
// netEM_multilayer
List netEM_multilayer(NumericVector y, int K, int p, double eps, int num_rand_start, int num_run_smallEM, int max_itr_smallEM, int burn, int MCMC_itr, double sigma_mult, double psi_mult, int n, int alpha);
RcppExport SEXP _netClust_netEM_multilayer(SEXP ySEXP, SEXP KSEXP, SEXP pSEXP, SEXP epsSEXP, SEXP num_rand_startSEXP, SEXP num_run_smallEMSEXP, SEXP max_itr_smallEMSEXP, SEXP burnSEXP, SEXP MCMC_itrSEXP, SEXP sigma_multSEXP, SEXP psi_multSEXP, SEXP nSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< int >::type num_rand_start(num_rand_startSEXP);
    Rcpp::traits::input_parameter< int >::type num_run_smallEM(num_run_smallEMSEXP);
    Rcpp::traits::input_parameter< int >::type max_itr_smallEM(max_itr_smallEMSEXP);
    Rcpp::traits::input_parameter< int >::type burn(burnSEXP);
    Rcpp::traits::input_parameter< int >::type MCMC_itr(MCMC_itrSEXP);
    Rcpp::traits::input_parameter< double >::type sigma_mult(sigma_multSEXP);
    Rcpp::traits::input_parameter< double >::type psi_mult(psi_multSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(netEM_multilayer(y, K, p, eps, num_rand_start, num_run_smallEM, max_itr_smallEM, burn, MCMC_itr, sigma_mult, psi_mult, n, alpha));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_netClust_netEM_unilayer", (DL_FUNC) &_netClust_netEM_unilayer, 10},
    {"_netClust_netEM_multilayer", (DL_FUNC) &_netClust_netEM_multilayer, 13},
    {NULL, NULL, 0}
};

RcppExport void R_init_netClust(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
